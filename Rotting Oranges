class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        # intialization 
        visited = set()
        queue = []
        level = 0
        directions = [(0,-1),(0,1),(-1,0),(1,0)]
        
        # intial setup
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 2:
                    visited.add((i,j))
                    queue.append((i,j))
        queue.append(())
        
        # BFS traversal
        while len(queue) > 1:
            currentValue = queue.pop(0)
            if currentValue == ():
                level += 1
                queue.append(())
                continue
            x,y = currentValue
            for dx,dy in directions:
                newX = dx+x
                newY = dy+y
                if (newX, newY) not in visited and newX in range(0,len(grid)) and newY in range(0,len(grid[0])) and grid[newX][newY] == 1:
                
                    visited.add((newX, newY))
                    queue.append((newX, newY))
                    
        # check if all fresh oranges are covered       
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1 and (i,j) not in visited:
                    return -1
        return level
    
        
                
                
