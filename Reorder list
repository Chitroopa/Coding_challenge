# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: ListNode) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        #find the middle element
        slow = fast = head
        while fast and fast.next:
            slow, fast = slow.next, fast.next.next
        
        # reverse the second part of the list
        prev, curr = None, slow        
        while curr:
            curr.next, prev, curr = prev, curr, curr.next
        
        #merge two linked list
        first, second = head, prev
        if second:
            while second.next:
                tmp = first.next
                first.next = second
                first = tmp

                tmp = second.next
                second.next = first
                second = tmp
