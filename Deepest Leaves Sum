# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deepestLeavesSum(self, root: TreeNode) -> int:
        if not root.left and not root.right:
            return root.val
    
        #intialization
        queue = []
        level_sum = 0
        
        queue.append(root)
        queue.append('()')
        
        # BFS traversal
        while len(queue) > 1:
            curr_node = queue.pop(0)
            if curr_node == '()':
                level_sum = 0
                queue.append('()')
                continue
            level_sum += curr_node.val
            if curr_node.left: queue.append(curr_node.left)
            if curr_node.right: queue.append(curr_node.right)
        return level_sum
        
        
        
