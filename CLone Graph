"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node: return node
        node_map = {}
        stack = [node]
        
        while stack:
            curr_old_node = stack.pop()
            if curr_old_node not in node_map:
                new_node = Node(curr_old_node.val, None)
                node_map[curr_old_node] = new_node
                for n in curr_old_node.neighbors:
                    stack.append(n)
                    
        for old_node in node_map:
            new_node = node_map[old_node]
            for n in old_node.neighbors:
                new_node.neighbors.append(node_map[n])
                
        return node_map[node]      
        

        
