class Solution:
    def __init__(self):
        self.valid_expressions = None
        self.min_removed = None
        
    def reset(self):
        self.valid_expressions = set()
        self.min_removed = float("inf")
        
    def remaining(self, string, index, left_count, right_count, exp, removed_count):
        
        if index == len(string):
            if left_count == right_count and removed_count <= self.min_removed:             
                if removed_count < self.min_removed:
                    self.valid_expressions = set()
                    self.min_removed = removed_count
                self.valid_expressions.add("".join(exp))
                return 
        else:
            char = string[index]
            if char != '(' and char != ')':
                exp.append(char)
                self.remaining(string, index +1, left_count, right_count, exp, removed_count)                 
                exp.pop()
            else:  
                self.remaining(string, index+1, left_count, right_count, exp, removed_count +1)
                exp.append(char)
                if string[index] == '(':
                    self.remaining(string, index+1, left_count + 1, right_count, exp, removed_count)
                elif right_count < left_count:
                    self.remaining(string, index+1, left_count, right_count +1, exp, removed_count)  
                exp.pop()
        
        
    def removeInvalidParentheses(self, s: str) -> List[str]:
        
        self.reset()
        
        self.remaining(s, 0, 0, 0, [], 0)
        
        return list(self.valid_expressions)
