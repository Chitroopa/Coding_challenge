# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        def isIdentical(s:TreeNode, t: TreeNode) -> bool:
            if not s and not t:
                return True
            if not s or not t:
                return False
            if s.val == t.val and isIdentical(s.left, t.left) and isIdentical(s.right,t.right):
                return True  
            return False
        def traversal(s:TreeNode, t:TreeNode) -> bool:
            return s and (isIdentical(s,t) or traversal(s.left,t) or traversal(s.right, t))
        return traversal(s,t)
            
            
            
            
        
    
        
