"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:
            return head
        mapping = {}
        ex_node = head
        new_head = new_node = Node(ex_node.val,None,ex_node.random)        
        mapping[ex_node] = new_node
        ex_node = ex_node.next
        while ex_node:
            new_node.next = Node(ex_node.val,None,ex_node.random)
            
            mapping[ex_node] = new_node.next
            new_node = new_node.next
            ex_node = ex_node.next
            
        new_list = new_head
        while new_head:
            R = new_head.random
            new_head.random = mapping.get(R,None)
            new_head = new_head.next
        return new_list            
            
