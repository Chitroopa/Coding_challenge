#---------------------------------------------------------------------------------------------
# python cheat sheet
#----------------------------------------------------------------------------------------------

> create m * n matrix  
    matrix = [[0]*n for _ in range(m)]
    
> access last element in matrix
    matrix[-1][-1]
    
> move vertically and horizontally in 2d matrix
    [(-1,0),(1,0),(0,-1),(0,1)] #[up, down, left, right]
    
> move diagonally in 2d matrix
    [(-1,-1),(1,1),(-1,1),(1,-1)]
    
> lambda
    closest = min(node.val, closest, key= lambda x:abs(target - x))
    
> sort in decending order # sort is in-place
    listname.sort(reverse = True)

> sorting based on index
    interval = [[1,4],[0,2]]    # need to sort based on index interval[i][0]
    interval = sorted(interval, key = lambda x:x[0])    # interval = [[0, 2], [1, 4]]


> sort a string
    s = "bqwxa"
    print(sorted(s)) # ['a', 'b', 'q', 'w', 'x']
    temp = "".join(sorted(s)) # temp = abqwx

> string functions
    s = abc1324
    s.isalnum() - The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.
    s.isalpha() - The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False.
    s.isupper() - The string isupper() method returns whether or not all characters in a string are uppercased or not.
    s.islower() - The islower() method returns True if all alphabets in a string are lowercase alphabets. If the string contains at least one uppercase alphabet, it returns False.
    s.isdigit() -The isdigit() method returns True if all characters in a string are digits. If not, it returns False.

> ord()- The ord() function returns the number representing the unicode code of a specified character.
    eg ord("A") returns 65
    chr(65) returns A # convert back to char
    
> Cipher
    formula - chr((ord(ch) + rotation_factor - starting_of_upper_or_lower_case) %26 + starting_of_upper_or_lower_case)
    eg: 
    def rotationalCipher(input, rotation_factor):
      # Write your code here
      result = ""
      for ch in input:
        if ch.isalnum():
          if ch.isupper():
            result += chr((ord(ch) + rotation_factor - 65 ) %26 + 65)
          elif ch.islower():
            result += chr((ord(ch) + rotation_factor - 97) %26 + 97)
          else:
            result += chr((ord(ch)+ rotation_factor - 48) % 10 + 48)
        else:
          result += ch
      return result


    
> remove duplicates from list
    l = [1,2,3,1,1,1,1]
    l = list(set(l))
    print(l) # [1, 2, 3]
    
> find product of list elements
    import numpy
    a = [1,2,3]
    print(numpy.prod(a)) # results 6
    
> Infinity 
    a = float('inf') # postive infinity 
    a = float('-inf') # negative infinity
    
> integer range from -2147483648 to 2147483647 

> to get the place value (ones tens hundreds)
    n = "123"
    res = 0
    for i in range(len(n))
        v = int(n) * 10**(len(n)-1-i)) # 3 * 10**(3-1-1) => 3*10**0 =>3*1 =>3
        res += v
    # ** - 'power of' eg 10**2 -> 10 time 2
    
> exception handler
    try: 
        res_int = int(res_str)
        if -2147483648 < res_int < 2147483647:
            return res_int
        else: return -2147483648 if sign == '-' else 2147483647
    except:
        return 0


> str.zfill(width)
    x = "1"
    x.zfill(2) # x = "01"
    
    #The zfill() method pads string on the left with zeros to fill width.
    
> nonlocal variable #used in nested loops
    nonlocal variable_name

> looping 
    a = [1,2,3,4]
    print([x for x in range(len(a)-1, -1, -1) ]) # reverse loop [3, 2, 1, 0]
    print([x for x in range(len(a))]) # [0, 1, 2, 3]
    
    # range([start], stop[, step])    
    
> Binary Exponential
    n^0 = 1
    when n is even  - (x^n/2)^2 # eg x = 4 n= 6 =>(4^3)^2 
    when n is odd - (x^n/2)^2 * x # eg: x = 4 n = 11 => (4^5)^2 * 4
    when n is negative - x = 1/x and n = -n
    
> list comprehension
    nums = [0,1,0,3,0,0,4,0]
    values = [n for n in nums if n]
    print(values) #[1, 3, 4]
    
> dict comprehension
    nums = [0,1,0,3,0,0,4,0]
    values = {i:n for i,n in enumerate(nums) if n} # enumerate can take any thing iterable as input and returns element and its index
    print(values) # {1: 1, 3: 3, 6: 4}
        
> heap
    #heapq defult is min heap
    import heapq
    heap = []
    heapify(heap) # transforms list X into heap 
    heappush(heap, item)
    heappop(heap) 
    heap[0] # lookup smallest element 
    heappushpop(heap, item)
    heapq.nlargest(n, heap) #eg heap = [5,6,7,2] , heapq.nlargest(3,heap) will give [7,6,5]
    heapq.nsmallest(n, heap) #eg heap = [5,6,7,2] , heapq.nsmallest(3,heap) will give [2,5,6]
    
    # max heap hack
    heappush(heap, -item) # change item value to negative
    
> defult dictonary
    from collections import defaultdict
    new_map = defaultdict(list) # default value is list => { key:[]}
    new_map = defaultdict(int) # default value as integer
    new_map = defaultdict(set) # default value as set 

> counter 
    from collections import Counter
    a = [1,1,1,1,1,1,2,2,3,3]
    new_map = Counter(a)
    
> OrderedDict() - remembers the order of insertion - used in LRU Cache implementation
    from collections import OrderedDict
    new_OD = OrderedDict()
    new_OD['a'] = 2
    new_OD['b'] = 3
    new_OD['c'] = 4
    print(new_OD)           # prints OrderedDict([('a', 2), ('b', 3), ('c', 4)])

    new_OD.move_to_end('a') # moves element to right end(default)
    print(new_OD)           # prints OrderedDict([('b', 3), ('c', 4), ('a', 2)])

    new_OD.move_to_end('b', last=False) # moves element to Left end
    print(new_OD)                       # prints OrderedDict([('b', 3), ('c', 4), ('a', 2)])

    new_OD.popitem(last= True)  # LIFO
    print(new_OD)               # prints OrderedDict([('b', 3), ('c', 4)])

    new_OD.popitem(last= False) # FIFO
    print(new_OD)               #prints OrderedDict([('c', 4)])
        
    

> itertools 
    # eg: to get boundary coordinates for board
    
    from itertools import chain, repeat
    boundary = set(chain(zip(repeat(0), range(cols)), #top 
                        zip(repeat(rows-1), range(cols)), #bottom
                        zip(range(rows),repeat(0)), #left
                        zip(range(rows), repeat(cols-1)))) #right 
   # repeat(10, 3) --> 10 10 10 #A common use for repeat is to supply a stream of constant values to imap or zip
   # chain('ABC', 'DEF') --> A B C D E F
   # zip((1,2,3),(4,5,6)) ---> (1, 4), (2, 5), (3, 6) Iterator objects that will be joined together   

#---------------------------------------------<<End>>-------------------------------------------

#----------------------------------------------------------------------------------------------
# Compexity analysis
#----------------------------------------------------------------------------------------------

> Recurssion => number of ways ^ n
    for tree -> 2^n # left and right
    for decode ways -> 2^n # two possiblities
    
> heap 
    insert/ delete - number of time * log(size of heap) => O(n log n)
> sort - O(log n)

#substring is a continuous part or subpart of a string
#subsequence is the part of a string or sequence, that might be continuous or not but the order of the elements is maintained

> substring generation = n(n+1)/2 => O(n^2) 
> subsequence = two possiblity for a char (with or without) => 2^n => O(2^n)
> DFS => O(E +V) 
> BFS => O(E +V)




#----------------------------------------------------------------------------------------------
# DS and Algorithm cheat sheet
#----------------------------------------------------------------------------------------------

> using collections (hashMap, hashSet, Stack and queue)
    - find a pair/group of numbers satisfying a given target condition. eg: find two numbers in a array that sums up to the given target number.

> Sorting:
    - Rearrange the given array elements in a specified way to obtain the output

> Simple array traversal:
    - Find a single value or a transformation of the given array in some way.

> Two pointers:
    - search set of elements with a given condition. Eg: container with most water
    - find triplets or a sub array with the given condition
> Fast and slow pointers:
    - find the position of an element, or the length of the array, where the array hass cycle/loop.
> Two heaps:
    - find the smallest/largest/medium element of an array
> Subsets:
    - permuntation and combination of a given set
> Top K elements:
    - find the top k smallest/largest/frequent elements of an array
> sliding window:
    -find the short/long subset of a given array
> Merge Intervals:
    - find overlapping intervals/mutually exclusive intervals/ merge intervals given the input is a list/array of intervals [t1.t2]
> Backtracking:
    - find permuntaions or combinations of the array elements
    
> DP:
    - memoization
    - tabulation 






#----------------------------------------------------------------------------------------------
# find all substrings
#----------------------------------------------------------------------------------------------
def findsubstring(string):
    result = []
    counter = 1
    while counter < len(string):
        for i in range(len(string)):
            slice_s = string[i: i+counter]
            if len(slice_s) == counter:
                result.append(slice_s)
        counter += 1
    return result

print(findsubstring('chitroopa'))
#------------------------------------------<<<<< End >>>> ---------------------------------------


#-------------------------------------------------------------------------------------------------
# Backtracking 
#------------------------------------------------------------------------------------------------
eg: perumtation # A “combination lock” should really be called a “permutation lock”. The order you put in the numbers of lock matters
def permutation(chars, strSoFar):
  if not chars: return print(strSoFar)
  for c in chars:
    currChar = c
    chars.remove(c)
    permutation(chars, strSoFar + currChar)
    chars.add(c)

chars = {'a', 'b', 'c', 'd'}
strSoFar = ""
permutation(chars, strSoFar)

----------------------------------------<<End>>---------------------------------------------------------
#-------------------------------------------------------------------------------------------------
# Binary search
#------------------------------------------------------------------------------------------------

def search(self, nums: List[int], target: int) -> int:
            left = 0
            right = len(nums)-1
            
            while left <= right:
                mid = (left + right) //2
                if nums[mid] == target:
                    return mid
                elif nums[mid] < target:
                    left = mid + 1
                else: right = mid - 1
            return -1   
----------------------------------------<<End>>---------------------------------------------------------
#-------------------------------------------------------------------------------------------------
# Two Sum
#------------------------------------------------------------------------------------------------

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        lookup = {}
        
        for idx in range(len(nums)):
            y = nums[idx]
            x = target - y
            
            if x not in lookup:
                lookup[y] = idx
            else:
                return [lookup[x] , idx]
----------------------------------------<<End>>---------------------------------------------------------
