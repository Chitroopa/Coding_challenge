"""
Find the contiguous subarray within an array, A of length N which has the largest sum.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the maximum possible sum of the contiguous subarray.
Constraints:

1 <= N <= 1e6
-1000 <= A[i] <= 1000
For example:

Input 1:
    A = [1, 2, 3, 4, -10]

Output 1:
    10

Explanation 1:
    The subarray [1, 2, 3, 4] has the maximum possible sum of 10.

Input 2:
    A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

Output 2:
    6

Explanation 2:
    The subarray [4,-1,2,1] has the maximum possible sum of 6.
"""
"""
Intial thoughts
curr_sum_so_far += A[i]
reset curr_sum_so_far = 0 when it is less then 0

update max when curr_sum_so_far > max 

"""
def maxPossibleSum(A):
    if not A:
        return 0 
    curr_sum_so_far = 0 
    max_value = 0 
    
    for index in range(len(A)):
        curr_sum_so_far += A[index]
        if curr_sum_so_far < 0:curr_sum_so_far = 0 
        if curr_sum_so_far > max_value: max_value = curr_sum_so_far
    return max_value
            


#testcases 
print(maxPossibleSum([]))
print(maxPossibleSum([1]))
print(maxPossibleSum([-1]))
print(maxPossibleSum([2,-2]))
print(maxPossibleSum([1, 2, 3, 4, -10]))
print(maxPossibleSum([-2, 1, -3, 4, -1, 2, 1, -5, 4]))
print(maxPossibleSum([-2, -1, -3, 4, -1, -2, -1, -5, 10]))
